MAIN

import java.io.IOException;

public class Main {
    public static void main(String[] args) throws IOException {
        Library myLib = new Library();
        do{
            try{
                myLib.Login();
            }catch (IOException e){
                System.out.println(e.getMessage());
            }
        }
        while(!myLib.loggedIn);


    }
}

LIBRARY

import java.io.*;
import java.util.*;

public class Library {
    login log = new login();
    // Book Arrays
    public List<String> myBooks;
    public int amountOfBooks;
    public List<String> books;
    public List<String> borrowedBooks;
    public int borrowedAmount;
    public List<String> returnedBooks;
    public String bookTitle, author, subjectCat, username, password, role;
    private Date timeTaken, timeReturned;
    public boolean loggedIn = false;
    public Library(){
        myBooks = new ArrayList<>(Arrays.asList());
        books = new ArrayList<>(Arrays.asList("Rich", "Hollow"));
        borrowedBooks = new ArrayList<>();
        returnedBooks = new ArrayList<>();
    }
    // Getters
    public Date getTimeTaken(){
        return timeTaken;
    }

    // Setters
    public Date getUserId(){
        return timeReturned;
    }
    // Library functions
    public void Login() throws IOException {
        Scanner myScan = new Scanner(System.in);
        int userOption;
        String username;
        String password;
        System.out.println("Home\n1.Librarian\n2.Student\n3.Close");
        System.out.print("Input: ");
        userOption = myScan.nextInt();
        System.out.print("Username: ");
        username = myScan.next();
        System.out.print("Password: ");
        password = myScan.next();
        switch(userOption){
            case 1:
                Librarian lib = new Librarian();
                Scanner libReader = new Scanner(lib.librarians);
                Scanner libKey = new Scanner(lib.libKeys);
                while (libReader.hasNextLine()){
                    String libData = libReader.nextLine();
                    String libKeyData = libKey.nextLine();
                    if(libData.contains(username)) {
                        if (libKeyData.contains(password)){
                            loggedIn = true;
                            lib.Operation();
                            libReader.close();
                        }
                        else {
                            throw new IOException("Invalid password entered");
                        }
                    }
                    else {
                        throw new IOException("Invalid librarian name entered");
                    }
                }
                break;
            case 2:
                Student st = new Student();
                Scanner fr = new Scanner(st.studentNames);
                Scanner fr2 = new Scanner(st.studentNumbers);
                while (fr.hasNextLine()){
                    String data = fr.nextLine();
                    String keydata = fr2.nextLine();
                    if(data.contains(username)) {
                        if (keydata.contains(password)){
                            loggedIn = true;
                            st.Operation();
                            fr.close();
                        }
                        else {
                            System.out.println("Invalid password entered");
                        }
                    }
                    else {
                        System.out.println("Invalid student Name entered");
                    }

                }
                break;
            case 3:
                System.out.println("Have an amazing day");
        }

    }
}

LIBRARIAN

import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
class Librarian extends Library implements UserIU {
    Scanner myScan = new Scanner(System.in);
    String names = "C:\\Users\\Ghost\\IdeaProjects\\Library_Management_System\\librarians.txt";
    String passwords = "C:\\Users\\Ghost\\IdeaProjects\\Library_Management_System\\libKeys.txt";
    File librarians = new File(names);
    File libKeys = new File(passwords);

    public int option;
    public Librarian() {
        super();
    }

    Student stu = new Student();
    // Class methods
    @Override
    public void Operation() throws IOException {
        System.out.println("\n1.AddUser\n2.AddBook\n3.Issue returned books\n4.ViewUsers\n5.ViewBooks\n6.ViewBooksReturned\n7.Logout");
        System.out.print("Input: ");
        option = myScan.nextInt();
        switch (option) {
            case 1:
                addUser();
                break;
            case 2:
                addBook();
                break;
            case 3:
                try{
                    issue_returnedBooks();
                }
                catch (Exception e){
                    System.out.println(e.getMessage());
                }
                finally {
                    Operation();
                }
                break;
            case 4:
                viewUsers();
                break;
            case 5:
                viewBooks();
                break;
            case 6:
                viewBooksReturned();
                break;
            case 7:
                loggedIn = false;
                System.out.println("Have an amazing day");
                Login();
                break;
        }
    }

    public void addUser() throws IOException {

        Scanner libReader = new Scanner(librarians);
        Scanner stuReader = new Scanner(stu.studentNames);
        System.out.print("Username: ");
        String username = myScan.next();
        System.out.print("Password: ");
        String password = myScan.next();
        System.out.print("Role: ");
        String role = myScan.next();
        ArrayList<String> libData = new ArrayList<>();
        ArrayList<String> stuData = new ArrayList<>();
        while (libReader.hasNextLine() && stuReader.hasNextLine()) {
            libData.add(libReader.nextLine());
            stuData.add(stuReader.nextLine());
        }
        if (role.equals("Librarian") && !libData.contains(username)){
            FileWriter libWriter = new FileWriter(names, true);
            PrintWriter pw = new PrintWriter(libWriter);
            pw.append("\n").append(username);
            pw.close();
            libWriter.close();
            FileWriter libkeyWriter = new FileWriter(passwords, true);
            PrintWriter pw2 = new PrintWriter(libkeyWriter);
            pw2.append("\n").append(password);
            pw2.close();
            libkeyWriter.close();
            System.out.println("Librarian added successfully");
        }
        else if (role.equals("Student") && !stuData.contains(username)){
            FileWriter stuWriter = new FileWriter(stu.names, true);
            PrintWriter pw3 = new PrintWriter(stuWriter);
            pw3.append("\n").append(username);
            pw3.close();
            stuWriter.close();
            FileWriter stukeyWriter = new FileWriter(stu.numbers, true);
            PrintWriter pw4 = new PrintWriter(stukeyWriter);
            pw4.append("\n").append(password);

            pw4.close();
            stukeyWriter.close();
            System.out.println("Student added successfully");
        }
        else{
            System.out.println("The role entered is invalid");
        }
        Operation();
    }
    public void addBook() throws IOException {
        System.out.print("Book Title: ");
        bookTitle = myScan.next();
        System.out.print("Author: ");
        author = myScan.next();
        System.out.print("Category: ");
        subjectCat = myScan.next();
        if (!books.contains(bookTitle) && !borrowedBooks.contains(bookTitle)){

        }
        else{
            System.out.println("That book already belongs to the library!");
        }
        Operation();
    }
    @Override
    public void issueBooks() {
        System.out.print("Book title: ");
        String bookName = myScan.next();
        if (books.contains(bookName)){
            myBooks.add(bookName);
            books.remove(bookName);
            borrowedBooks.add(bookName);
            System.out.print("Book successfully issued.");
        }
        else {
            System.out.println("Book entered does not exist");
        }
    }
    @Override
    public void issue_returnedBooks() throws Exception{
        System.out.print("Book title: ");
        String title = myScan.next();
        if (myBooks.contains(title)){
            books.add(title);
            myBooks.remove(title);
            returnedBooks.add(title);
            System.out.println("Book successfully returned");
        }
        else{
            throw new Exception("Book entered does not exist!");
        }
    }
    public void viewUsers() throws IOException {
        System.out.println("Librarians");
        Scanner libReader = new Scanner(librarians);
        while (libReader.hasNextLine()) {
            String libData = libReader.nextLine();
            System.out.println(libData);

        }

        System.out.print("Students: ");
        Scanner stuReader = new Scanner(stu.studentNames);
        while (stuReader.hasNextLine()) {
            String stuData = stuReader.nextLine();
            System.out.println(stuData);
        }
        libReader.close();
        stuReader.close();
        System.out.println("\n1.Add user\n2.Back to menu");
        System.out.print("Input: ");
        int choice = myScan.nextInt();
        switch (choice){
            case 1:
                addUser();
                break;
            case 2:
                Operation();
                break;
        }
        Operation();
    }
    public void viewBooks() throws IOException {
        for(int x = 0; x < books.size(); x++){
            System.out.print(books.get(x) + ", ");
        }
        amountOfBooks = books.size();
        System.out.println("Available: "+ amountOfBooks);
        Operation();
    }
    public void viewBooksReturned(){}

}

STUDENT

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

class Student extends Library implements UserIU {
    Scanner myScan = new Scanner(System.in);
    String names = "studentNames.txt";
    String numbers = "studentNumbers.txt";
    File studentNames = new File(names);
    File studentNumbers = new File(numbers);
    public int option, option2;

    public Student() {
        super();


    }
    // Class functions
    @Override
    public void Operation() throws IOException {
        System.out.println("\n1.View Books\n2.My Books\n3.Returned Books\n4.Logout");
        System.out.print("Input: ");
        option = myScan.nextInt();
        switch (option) {
            case 1:
                viewBooks();
                break;
            case 2:
                try{
                    myBooks();
                }catch (Exception e){
                    System.out.println(e.getMessage());
                }
                finally {
                    Operation();
                }
                break;
            case 3:
                returnedBooks();
                break;
            case 4:
                loggedIn = false;
                System.out.println("Successfully logged out");
                Login();
                break;
        }
    }

    public void viewBooks() throws IOException {
        int pos;
        System.out.println("1.Math\n2.Science");
        System.out.print("Input: ");
        pos = myScan.nextInt();
        for (int x = 0; x < books.size(); x++) {
            System.out.println(books.get(x));
        }
        amountOfBooks = books.size();
        System.out.println("Available Books: " + amountOfBooks);
        System.out.println("1.Get a book\n2.Back to menu");
        System.out.print("Input: ");
        option2 = myScan.nextInt();
        switch (option2) {
            case 1:
                issueBooks();
                Operation();
                break;
            case 2:
                Operation();
                break;
        }
    }

    public void myBooks() throws IOException {
        for (int y = 0; y < myBooks.size(); y++) {
            System.out.println(myBooks.get(y));
        }
        System.out.println("1.Return a book\n2.Back to main menu");
        int choice = myScan.nextInt();
        switch(choice){
            case 1:
                try{
                    issue_returnedBooks();
                }
                catch (Exception e){
                    System.out.println(e.getMessage());
                }
                finally {
                    Operation();
                }
            case 2:
                Operation();
                break;
        }
    }

    @Override
    public void issue_returnedBooks() throws Exception {
        System.out.print("Book title: ");
        String title = myScan.next();
        if (myBooks.contains(title)){
            books.add(title);
            myBooks.remove(title);
            returnedBooks.add(title);
            System.out.println("Book successfully returned");
        }
        else{
            throw new Exception("");
        }
    }
    public void returnedBooks() {
        for (int x =0; x < returnedBooks.size();x++){
            System.out.print(returnedBooks.get(x) + " ");
        }
    }
    @Override
    public void issueBooks() {
        System.out.print("Book title: ");
        String bookName = myScan.next();
        if (books.contains(bookName)){
            myBooks.add(bookName);
            books.remove(bookName);
            borrowedBooks.add(bookName);
            System.out.print("Book successfully issued.");
        }
        else {
            System.out.println("Book entered does not exist");
        }
    }
}

LIBRARY SYSTEM

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LibrarySyst extends Library {
    public JButton addUserButton;
    private JButton addBookButton;
    private JButton issueReturnedBooksButton1;
    private JButton viewUsersButton;
    private JButton viewBooksButton;
    private JButton viewBooksReturnedButton;

    public LibrarySyst() {
        addUserButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });
    }

}

LOGIN

import javax.swing.*;
import java.awt.event.*;
import java.io.IOException;

public class login extends JDialog{
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    public JTextField textName;
    public JTextField textPassword;

    public login() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    onOK();
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onOK() throws IOException {
        // add your code here
        Library library = new Library();
        library.Login();
        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void main(String[] args) {
        login dialog = new login();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }
}

USER INTERFACE

import java.io.IOException;

public interface UserIU {
    void Operation() throws IOException;
    void issueBooks();
    void issue_returnedBooks() throws Exception;

}
